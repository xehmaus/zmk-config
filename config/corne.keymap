/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * 7/14/25 Joe Schmaus
 *    - Updating to match "C:\Users\jhsch\Documents\Development\zmk-urchin\Keyboard Layouts.xlsx"
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define FLIP 1
#define NAV 2
#define NUM 3
#define FUN 4 
#define RSET 5
#define PAD 6
// -----------------

/ {     
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"
        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
		
		// Balanced homerow mods example from zmk.dev
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        // Key numbers for combos
        //  0  1  2  3  4  5           6  7  8  9 10 11 
        // 12 13 14 15 16 17          18 19 20 21 22 23
        // 24 25 26 27 28 29          30 31 32 33 34 35
        //             36 37 38    39 40 41  
        compatible = "zmk,combos";	
		// escape
        combo_esc {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
		// capsword
        combo_capsword {
            timeout-ms = <200>;
            key-positions = <14 15 17>;
            bindings = <&caps_word>;
        };
		// tab
        combo_tab {
            timeout-ms = <100>;
            key-positions = <3 4>;
            bindings = <&kp TAB>;
        };
		// backspace
        combo_bkp {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&kp BSPC>;
        };
        // TRIPLE combo mods
		// 1110 - CONTROL
		// 0111 - SHIFT
		// 1101 - ALT
		// 1111 - GUI
        combo_lctrl {
            timeout-ms = <100>;
            key-positions = <13 14 15>;
            bindings = <&sk LCTRL>;
        };
        combo_rctrl {
            timeout-ms = <100>;
            key-positions = <20 21 22>;
            bindings = <&sk RCTRL>;
        };
        combo_lshft {
            timeout-ms = <100>;
            key-positions = <14 15 16>;
            bindings = <&sk LSHFT>;
        };
        combo_rshft {
            timeout-ms = <100>;
            key-positions = <19 20 21>;
            bindings = <&sk RSHFT>;
        };
        combo_lalt {
            timeout-ms = <100>;
            key-positions = <13 14 16>;
            bindings = <&sk LALT>;
        };
        combo_ralt {
            timeout-ms = <100>;
            key-positions = <19 21 22>;
            bindings = <&sk RALT>;
        };
        combo_lgui {
            timeout-ms = <100>;
            key-positions = <27 28>;
            bindings = <&sk LGUI>;
        };
        combo_rgui {
            timeout-ms = <100>;
            key-positions = <31 32>;
            bindings = <&sk RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
   &kp GRAVE &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp MINUS
   &kp RBKT  &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp APOS
   &kp LBKT  &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp BSLH 
   &lt NAV RET &lt FLIP SPACE &lt NUM BSPC   &lt PAD DEL &lt RSET TAB &kp RSHFT
//                    &trans &trans &trans             &trans &trans &trans  
                        >;
        };
                flip_layer {
                        bindings = <
  &kp MINUS &kp SEMI &kp Y   &kp U     &kp L  &kp J    &trans &trans &trans &trans &trans &trans 
  &kp APOS  &kp O    &kp I   &kp E     &kp N  &kp M    &trans &trans &trans &trans &trans &trans 
  &kp BSLH  &kp FSLH &kp DOT &kp COMMA &kp H  &kp K    &trans &trans &trans &trans &trans &trans
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
                nav_layer {
                        bindings = <
  &kp CAPS  &kp INS  &kp RET  &kp UP   &kp PG_UP  &kp J       &trans &trans &trans &trans &trans &trans 
  &kp LSHFT &kp HOME &kp LEFT &kp DOWN &kp RIGHT  &kp END     &trans &trans &trans &trans &trans &trans 
  &kp LCTRL &kp LALT &kp BSPC &kp DEL  &kp PG_DN  &kp K_CMENU &trans &trans &trans &trans &trans &trans
//  &trans &trans &kp F9  &kp F8 &kp F7 &kp F12    &trans &trans &trans &trans &trans &trans 
//  &trans &trans &kp F6  &kp F5 &kp F4 &kp F11    &trans &trans &trans &trans &trans &trans 
//  &trans &trans &kp F3  &kp F2 &kp F1 &kp F10    &trans &trans &trans &trans &trans &trans
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
                num_layer {
                        bindings = <
  &kp STAR  &kp FSLH  &kp N9  &kp N8 &kp N7 &kp RET   &trans &trans &trans &trans &trans &trans 
  &kp EQUAL &kp PLUS  &kp N6  &kp N5 &kp N4 &kp DOT   &trans &trans &trans &trans &trans &trans 
  &trans    &kp MINUS &kp N3  &kp N2 &kp N1 &kp N0    &trans &trans &trans &trans &trans &trans
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
                fun_layer {
                        bindings = <
  &bt_clr &bt BT_SEL 0 &kp F9  &kp F8 &kp F7 &kp F12    &trans &trans &trans &trans &trans &trans 
  &trans &bt BT_SEL 1 &kp F6  &kp F5 &kp F4 &kp F11    &trans &trans &trans &trans &trans &trans 
  &trans &bt BT_SEL 2 &kp F3  &kp F2 &kp F1 &kp F10    &trans &trans &trans &trans &trans &trans
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
                rset_layer {
                        bindings = <
  &trans &trans &trans &trans &trans &trans     &trans &trans    &trans    &trans   &trans   &trans 
  &trans &trans &trans &trans &trans &trans     &trans &kp RCTRL &kp RSHFT &kp RALT &kp RGUI &trans 
  &trans &trans &trans &trans &trans &trans     &trans &trans    &trans    &trans   &trans   &trans
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
                pad_layer {
                        bindings = <
  &trans &trans &trans &trans &trans &trans   &kp KP_ENTER &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_SLASH &kp KP_MULTIPLY
  &trans &trans &trans &trans &trans &trans   &kp KP_DOT   &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS  &kp KP_EQUAL
  &trans &trans &trans &trans &trans &trans   &kp KP_N0    &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_MINUS &kp KP_NUM
                    &trans &trans &trans             &trans &trans &trans   
                        >;
                };
        };
};
