/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define BASE 0
#define FLIP 1
#define NAV 2
#define NUM 3
#define FUN 4 
#define RSET 5
#define PAD 6
// -----------------

/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        bindings = <
   &kp GRAVE &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp MINUS
   &kp RBKT  &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp APOS
   &kp LBKT  &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp BSLH 
 //  &lt NAV ENT &lt FLIP SPACE &lt NUM BSPC   &lt PAD DEL &lt RSET TAB &kp RSHFT
                    &trans &trans &trans             &trans &trans &trans  
                        >;
                };
//                flip_layer {
//                        bindings = <
//  &kp MINUS &kp SEMI &kp Y   &kp U     &kp L  &kp J    &trans &trans &trans &trans &trans &trans 
//  &kp APOS  &kp O    &kp I   &kp E     &kp N  &kp M    &trans &trans &trans &trans &trans &trans 
//  &kp BSLH  &kp FSLH &kp DOT &kp COMMA &kp H  &kp K    &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans             &trans &trans &trans  
//                        >;
//                };
//                nav_layer {
//                        bindings = <
//  &kp CAPS  &kp INS  &kp ENT  &kp UP   &kp PG_UP  &kp J       &trans &trans &trans &trans &trans &trans 
//  &kp LSHFT &kp HOME &kp LEFT &kp DOWN &kp RIGHT  &kp END     &trans &trans &trans &trans &trans &trans 
//  &kp LCTRL &kp LALT &kp BSPC &kp DEL  &kp PG_DN  &kp K_CMENU &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans             &trans &trans &trans  
//                        >;
//                };
//                num_layer {
//                        bindings = <
//  &kp STAR  &kp FSLH  &kp N9  &kp N8 &kp N7 &kp RET   &trans &trans &trans &trans &trans &trans 
//  &kp EQUAL &kp PLUS  &kp N6  &kp N5 &kp N4 &kp DOT   &trans &trans &trans &trans &trans &trans 
//  &trans    &kp MINUS &kp N3  &kp N2 &kp N1 &kp N0    &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans             &trans &trans &trans  
//                        >;
//                };
//                fun_layer {
//                        bindings = <
//  &trans &trans &kp F9  &kp F8 &kp F7 &kp F12    &trans &trans &trans &trans &trans &trans 
//  &trans &trans &kp F6  &kp F5 &kp F4 &kp F11    &trans &trans &trans &trans &trans &trans 
//  &trans &trans &kp F3  &kp F2 &kp F1 &kp F10    &trans &trans &trans &trans &trans &trans
//                    &trans &trans &trans             &trans &trans &trans  
//                        >;
//                };
//                rset_layer {
//                        bindings = <
//  &trans &trans &trans &trans &trans &trans     &trans &trans    &trans    &trans   &trans   &trans 
//  &trans &trans &trans &trans &trans &trans     &trans &kp RCTRL &kp RSHFT &kp RALT &kp RGUI &trans 
//  &trans &trans &trans &trans &trans &trans     &trans &trans    &trans    &trans   &trans   &trans
//                    &trans &trans &trans             &trans &trans &trans  
//                        >;
//                };
//                pad_layer {
//                        bindings = <
//  &trans &trans &trans &trans &trans &trans   &kp KP_ENTER &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_SLASH &kp KP_MULTIPLY
//  &trans &trans &trans &trans &trans &trans   &kp KP_DOT   &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS  &kp KP_EQUAL
//  &trans &trans &trans &trans &trans &trans   &kp KP_N0    &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_MINUS &kp KP_NUM
//                    &trans &trans &trans             &trans &trans &trans   
//                        >;
//                };
        };
};
